{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","App","state","isSignedIn","uiConfig","signInFlow","signInOptions","auth","GoogleAuthProvider","PROVIDER_ID","FacebookAuthProvider","GithubAuthProvider","EmailAuthProvider","callbacks","signInSuccess","componentDidMount","onAuthStateChanged","user","setState","console","log","className","this","currentUser","displayName","alt","src","photoURL","href","onClick","signOut","firebaseAuth","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"gTASAA,IAASC,cAJM,CACbC,OAAQ,0CACRC,WAAY,+B,IAoDCC,E,2MA/CbC,MAAQ,CAAEC,YAAY,G,EACtBC,SAAW,CACTC,WAAY,QAGZC,cAAe,CACbT,IAASU,KAAKC,mBAAmBC,YACjCZ,IAASU,KAAKG,qBAAqBD,YACnCZ,IAASU,KAAKI,mBAAmBF,YACjCZ,IAASU,KAAKK,kBAAkBH,aAElCI,UAAW,CACTC,cAAe,kBAAM,K,EAIzBC,kBAAoB,WAClBlB,IAASU,OAAOS,oBAAmB,SAAAC,GACjC,EAAKC,SAAS,CAAEf,aAAcc,IAC9BE,QAAQC,IAAI,OAAQH,O,wEAKtB,OACE,yBAAKI,UAAU,OACZC,KAAKpB,MAAMC,WACV,4BACE,4BAAI,gDAAsBN,IAASU,OAAOgB,YAAYC,cACtD,4BAAI,yBAAKH,UAAU,SAASI,IAAI,cAAcC,IAAK7B,IAASU,OAAOgB,YAAYI,YAC/E,4BAAI,uBAAGC,KAAK,kCAAkCP,UAAU,QAApD,6BACJ,4BAAI,4BAAQQ,QAAS,kBAAMhC,IAASU,OAAOuB,WAAWT,UAAU,UAA5D,mBAGN,6BACE,iDACA,kBAAC,IAAD,CACEjB,SAAUkB,KAAKlB,SACf2B,aAAclC,IAASU,e,GAvCnByB,aCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.77d07f67.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport \"./App.css\"\nimport firebase from \"firebase\"\nimport StyledFirebaseAuth from \"react-firebaseui/StyledFirebaseAuth\"\n\nconst config = {\n  apiKey: 'AIzaSyD118xTsi9yBBetVPLzhhCLV8e-GGgkyQc',\n  authDomain: 'appi-a8ecf.firebaseapp.com',\n};\nfirebase.initializeApp(config);\n\nclass App extends Component {\n  state = { isSignedIn: false }\n  uiConfig = {\n    signInFlow: \"popup\",\n  // Redirect to /signedIn after sign in is successful. Alternatively you can provide a callbacks.signInSuccess function.\n  // signInSuccessUrl: '/signedIn',\n    signInOptions: [\n      firebase.auth.GoogleAuthProvider.PROVIDER_ID,\n      firebase.auth.FacebookAuthProvider.PROVIDER_ID,\n      firebase.auth.GithubAuthProvider.PROVIDER_ID,\n      firebase.auth.EmailAuthProvider.PROVIDER_ID\n    ],\n    callbacks: {\n      signInSuccess: () => false\n    }\n  }\n\n  componentDidMount = () => {\n    firebase.auth().onAuthStateChanged(user => {\n      this.setState({ isSignedIn: !!user })\n      console.log(\"user\", user)\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        {this.state.isSignedIn ? (\n          <ul>\n            <li><h2>Conectado como : {firebase.auth().currentUser.displayName}</h2></li>\n            <li><img className=\"avatar\" alt=\"profile pic\" src={firebase.auth().currentUser.photoURL}/></li>\n            <li><a href=\"https://api-open.herokuapp.com/\" className=\"link\">visitar otro experimento</a></li>\n            <li><button onClick={() => firebase.auth().signOut()} className=\"danger\">cerrar sesion</button></li>\n          </ul>\n          ) : (\n          <div>\n            <h2>Conectate, vamos!</h2>\n            <StyledFirebaseAuth\n              uiConfig={this.uiConfig}\n              firebaseAuth={firebase.auth()}\n            />\n          </div>\n          )}\n      </div>\n    )\n  }\n}\n\nexport default App\n\n\n\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}